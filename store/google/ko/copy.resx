<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Title" xml:space="preserve">
    <value>Bitwarden 비밀번호 관리자</value>
    <comment>Max 30 characters</comment>
  </data>
  <data name="ShortDescription" xml:space="preserve">
    <value>Bitwarden은 온라인에서 사용자를 안전하게 지켜주는 비밀번호 관리자입니다.</value>
    <comment>Max 80 characters</comment>
  </data>
  <data name="FullDesciption" xml:space="preserve">
    <value>Bitwarden은 당신의 로그인과 비밀번호를 보관하고 여러 기기에서 동기화할 수 있는 가장 쉽고 안전한 방법입니다.

계정 도용은 매우 위험한 문제입니다. 당신이 사용하는 앱 및 웹 사이트는 거의 매일 공격을 당하고 있습니다. 보안 결함이 생겨 비밀번호를 탈취당하고, 그 비밀번호를 앱 및 웹 사이트에 다시 사용하게 되면 해커들은 이메일, 은행 계좌 등 사용자의 중요한 계정에 쉽게 접근할 수 있게 됩니다.

Bitwarden은 사용자의 모든 로그인을 여러 기기에서 동기화할 수 있는 암호화된 보관함에 저장합니다. 보관함은 완벽히 암호화되어 있으므로 오직 사용자 본인만이 데이터에 접근할 수 있습니다. Bitwarden 팀의 멤버들도 사용자의 데이터를 읽을 수 없습니다. 사용자의 데이터는 AES-256비트, 솔트 해싱 및 PBKDF2 SHA-256 방식으로 암호화됩니다.

Bitwarden은 100% 오픈 소스 소프트웨어입니다. Bitwarden의 소스 코드는 GitHub에 공개되어 있으며 모든 사람들이 Bitwarden의 코드를 검토하고 기여할 수 있습니다.</value>
  <comment>Max 4000 characters</comment>
  </data>
  <data name="FeatureGraphic" xml:space="preserve">
    <value>당신의 모든 기기에서 사용할 수 있는, 안전한 무료 비밀번호 관리자</value>
  </data>
  <data name="Screenshot1" xml:space="preserve">
    <value>안전한 보관함에서 모든 로그인과 비밀번호를 관리하세요.</value>
  </data>
  <data name="Screenshot2" xml:space="preserve">
    <value>강하고 안전한 무작위 비밀번호 자동 생성 기능을 제공합니다.</value>
  </data>
  <data name="Screenshot3" xml:space="preserve">
    <value>지문, PIN 코드, 마스터 비밀번호로 보관함을 보호하세요.</value>
  </data>
  <data name="Screenshot4" xml:space="preserve">
    <value>웹 브라우저 및 다른 앱에서 자동 완성을 통해 빠르게 로그인할 수 있습니다.</value>
  </data>
  <data name="Screenshot5" xml:space="preserve">
    <value>여러 기기에서 보관함에 접근하고 동기화할 수 있습니다.

- 휴대전화
- 태블릿
- PC
- 웹</value>
  </data>
</root>
